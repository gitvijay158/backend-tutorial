{"ast":null,"code":"// someSaga.js\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USER = 'DELETE_USER';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\n\n// const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\n// const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\n// const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';\n\n// Worker saga: will be fired on FETCH_DATA actions\nfunction* loadUsers() {\n  try {\n    const response = yield call(axios.get, 'http://localhost:3002/api/users');\n    // console.log(\"response===>\", response.data);\n    yield put({\n      type: FETCH_SUCCESS,\n      payload: response.data\n    }); //{ type: 'FETCH_SUCCESS', payload: response.data }\n  } catch (error) {\n    yield put({\n      type: FETCH_FAILURE,\n      error\n    });\n  }\n}\n\n// Watcher saga: spawns a new fetchData saga on each FETCH_DATA action\nexport function* watchUserGetData() {\n  // console.log(\"watchUserGetData===>\");\n  yield takeEvery(LOAD_USERS, loadUsers);\n}","map":{"version":3,"names":["call","put","takeEvery","axios","LOAD_USERS","UPDATE_USER","DELETE_USER","FETCH_FAILURE","FETCH_SUCCESS","loadUsers","response","get","type","payload","data","error","watchUserGetData"],"sources":["/opt/lampp/htdocs/reduxsagaapp/src/redux/sagas/userSaga.js"],"sourcesContent":["// someSaga.js\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USER = 'DELETE_USER';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\n\n// const FETCH_USER_REQUEST = 'FETCH_USER_REQUEST';\n// const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\n// const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';\n\n// Worker saga: will be fired on FETCH_DATA actions\nfunction* loadUsers() {\n  try {\n\n    const response = yield call(axios.get, 'http://localhost:3002/api/users');\n    // console.log(\"response===>\", response.data);\n    yield put({ \n        type: FETCH_SUCCESS, \n        payload: response.data\n      } );//{ type: 'FETCH_SUCCESS', payload: response.data }\n  } catch (error) {\n    yield put({ type: FETCH_FAILURE, error });\n  }\n}\n\n// Watcher saga: spawns a new fetchData saga on each FETCH_DATA action\nexport function* watchUserGetData() {\n    // console.log(\"watchUserGetData===>\");\n  yield takeEvery(LOAD_USERS, loadUsers);\n}\n"],"mappings":"AAAA;;AAEA,SAASA,IAAI,EAAEC,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AACzD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;;AAE5C;AACA;AACA;;AAEA;AACA,UAAUC,SAASA,CAAA,EAAG;EACpB,IAAI;IAEF,MAAMC,QAAQ,GAAG,MAAMV,IAAI,CAACG,KAAK,CAACQ,GAAG,EAAE,iCAAiC,CAAC;IACzE;IACA,MAAMV,GAAG,CAAC;MACNW,IAAI,EAAEJ,aAAa;MACnBK,OAAO,EAAEH,QAAQ,CAACI;IACpB,CAAE,CAAC,CAAC;EACR,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMd,GAAG,CAAC;MAAEW,IAAI,EAAEL,aAAa;MAAEQ;IAAM,CAAC,CAAC;EAC3C;AACF;;AAEA;AACA,OAAO,UAAUC,gBAAgBA,CAAA,EAAG;EAChC;EACF,MAAMd,SAAS,CAACE,UAAU,EAAEK,SAAS,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}