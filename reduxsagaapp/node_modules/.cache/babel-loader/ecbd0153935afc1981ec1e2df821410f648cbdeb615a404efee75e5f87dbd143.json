{"ast":null,"code":"/*-----------Redux Thunk connection with createStore-------------- */\n// src/redux/store.js\n// import { createStore, applyMiddleware } from 'redux';\n// import {thunk} from 'redux-thunk';\n// import rootReducer from './reducers'; // Adjust the path to where your root reducer is\n\n// const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// export default store;\n\n/*-----------Redux Thunk connection with configureStore(in built:applyMiddleware(thunk))-------------- */\n// import { configureStore } from '@reduxjs/toolkit';\n// import rootReducer from './reducers';\n\n// const store = configureStore({\n//   reducer: rootReducer,\n// });\n\n// export default store;\n\n/*-----------Redux Saga connection-------------- */\n// 1. Import saga middleware\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'; // 1. Import saga middleware\nimport rootReducer from './reducers'; // Adjust the path to where your root reducer is\nimport rootSaga from './sagas'; // Import your root saga (where all sagas are combined)\n\n// 2. Create the saga middleware\nconst sagaMiddleware = createSagaMiddleware(); // Create the saga middleware\n\n// 3. Create the Redux store and apply the middleware\nconst store = createStore(rootReducer,\n// Your combined reducers\napplyMiddleware(sagaMiddleware) // Applying saga middleware to the store\n);\n\n// 4. Run the root saga\nsagaMiddleware.run(rootSaga); // Run the root saga\n\nexport default store;","map":{"version":3,"names":["createStore","applyMiddleware","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleware","store","run"],"sources":["/opt/lampp/htdocs/reduxsagaapp/src/redux/store.js"],"sourcesContent":["\n/*-----------Redux Thunk connection with createStore-------------- */\n// src/redux/store.js\n// import { createStore, applyMiddleware } from 'redux';\n// import {thunk} from 'redux-thunk';\n// import rootReducer from './reducers'; // Adjust the path to where your root reducer is\n\n// const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// export default store;\n\n/*-----------Redux Thunk connection with configureStore(in built:applyMiddleware(thunk))-------------- */\n// import { configureStore } from '@reduxjs/toolkit';\n// import rootReducer from './reducers';\n\n// const store = configureStore({\n//   reducer: rootReducer,\n// });\n\n// export default store;\n\n/*-----------Redux Saga connection-------------- */\n// 1. Import saga middleware\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'; // 1. Import saga middleware\nimport rootReducer from './reducers'; // Adjust the path to where your root reducer is\nimport rootSaga from './sagas'; // Import your root saga (where all sagas are combined)\n\n// 2. Create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();// Create the saga middleware\n\n// 3. Create the Redux store and apply the middleware\nconst store = createStore(\n  rootReducer, // Your combined reducers\n  applyMiddleware(sagaMiddleware) // Applying saga middleware to the store\n);\n\n// 4. Run the root saga\nsagaMiddleware.run(rootSaga);// Run the root saga\n\nexport default store;\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAASA,WAAW,EAAEC,eAAe,QAAQ,OAAO;AACpD,OAAOC,oBAAoB,MAAM,YAAY,CAAC,CAAC;AAC/C,OAAOC,WAAW,MAAM,YAAY,CAAC,CAAC;AACtC,OAAOC,QAAQ,MAAM,SAAS,CAAC,CAAC;;AAEhC;AACA,MAAMC,cAAc,GAAGH,oBAAoB,CAAC,CAAC,CAAC;;AAE9C;AACA,MAAMI,KAAK,GAAGN,WAAW,CACvBG,WAAW;AAAE;AACbF,eAAe,CAACI,cAAc,CAAC,CAAC;AAClC,CAAC;;AAED;AACAA,cAAc,CAACE,GAAG,CAACH,QAAQ,CAAC,CAAC;;AAE7B,eAAeE,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}