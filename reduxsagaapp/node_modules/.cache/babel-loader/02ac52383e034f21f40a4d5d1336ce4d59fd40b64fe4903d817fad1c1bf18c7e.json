{"ast":null,"code":"// someSaga.js\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport * as utilsConstant from '../../utils/constant';\n\n// export const LOAD_USERS = 'LOAD_USERS';\n// export const UPDATE_USER = 'UPDATE_USER';\n// export const DELETE_USER = 'DELETE_USER';\n// export const FETCH_FAILURE = 'FETCH_FAILURE';\n// export const FETCH_SUCCESS = 'FETCH_SUCCESS';\nimport { LOAD_USERS, FETCH_FAILURE, FETCH_SUCCESS, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, DELETE_USER_REQUEST, DELETE_USER_SUCCESS } from '../actions/types/userTypes';\n\n// Worker saga: will be fired on FETCH_DATA actions\nfunction* loadUsersRecord() {\n  try {\n    const response = yield call(axios.get, `${utilsConstant.BASE_URL}/api/users`);\n    // console.log(\"response===>\", response.data);\n    yield put({\n      type: FETCH_SUCCESS,\n      payload: response.data\n    }); //{ type: 'FETCH_SUCCESS', payload: response.data }\n  } catch (error) {\n    yield put({\n      type: FETCH_FAILURE,\n      error\n    });\n  }\n}\n\n// Watcher saga: spawns a new fetchData saga on each LOAD_USERS action\nexport function* watchUserGetData() {\n  // console.log(\"watchUserGetData===>\");\n  yield takeEvery(LOAD_USERS, loadUsersRecord);\n}\n\n// Worker Saga: This handles the user update\nfunction* updateUserRecord(action) {\n  try {\n    const {\n      userId,\n      updatedUserData\n    } = action.payload;\n    // console.log(\"userId===>\", userId);\n\n    // Example: Assume an API call to update user data\n    const response = yield call(axios.put, `${utilsConstant.BASE_URL}/api/users/${userId}`, updatedUserData);\n\n    // Dispatch an action to update the Redux state after a successful update\n    yield put({\n      type: UPDATE_USER_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: FETCH_FAILURE,\n      error\n    });\n  }\n}\n\n// Watcher Saga: Watches for the UPDATE_USER_REQUEST action\nexport function* watchUpdateUserRecord() {\n  yield takeEvery(UPDATE_USER_REQUEST, updateUserRecord);\n}\nexport function* deleteUserRecord(action) {\n  try {\n    const {\n      userId\n    } = action.payload;\n    // console.log(\"userId===>\", userId);\n\n    // Example: Assume an API call to delete user data\n    yield call(axios.delete, `${utilsConstant.BASE_URL}/api/users/${userId}`);\n\n    // Dispatch action to fetch updated users list\n    yield put({\n      type: DELETE_USER_SUCCESS,\n      payload: userId\n    });\n\n    // Fetch updated user list from the API\n    yield put({\n      type: LOAD_USERS\n    }); // Trigger user list refresh\n  } catch (error) {\n    yield put({\n      type: FETCH_FAILURE,\n      error\n    });\n  }\n}\n\n// Watcher Saga: Watches for the DELETE_USER_REQUEST action\nexport function* watchDeleteUserRecord() {\n  yield takeEvery(DELETE_USER_REQUEST, deleteUserRecord);\n}","map":{"version":3,"names":["call","put","takeEvery","axios","utilsConstant","LOAD_USERS","FETCH_FAILURE","FETCH_SUCCESS","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","loadUsersRecord","response","get","BASE_URL","type","payload","data","error","watchUserGetData","updateUserRecord","action","userId","updatedUserData","watchUpdateUserRecord","deleteUserRecord","delete","watchDeleteUserRecord"],"sources":["/opt/lampp/htdocs/reduxsagaapp/src/redux/sagas/userSaga.js"],"sourcesContent":["// someSaga.js\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport * as utilsConstant from '../../utils/constant';\n\n// export const LOAD_USERS = 'LOAD_USERS';\n// export const UPDATE_USER = 'UPDATE_USER';\n// export const DELETE_USER = 'DELETE_USER';\n// export const FETCH_FAILURE = 'FETCH_FAILURE';\n// export const FETCH_SUCCESS = 'FETCH_SUCCESS';\nimport { LOAD_USERS,FETCH_FAILURE, FETCH_SUCCESS, \n  UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS, DELETE_USER_REQUEST, DELETE_USER_SUCCESS\n} from '../actions/types/userTypes';\n\n\n// Worker saga: will be fired on FETCH_DATA actions\nfunction* loadUsersRecord() {\n  try {\n\n    const response = yield call(axios.get, `${utilsConstant.BASE_URL}/api/users`);\n    // console.log(\"response===>\", response.data);\n    yield put({ \n        type: FETCH_SUCCESS, \n        payload: response.data\n      } );//{ type: 'FETCH_SUCCESS', payload: response.data }\n  } catch (error) {\n    yield put({ type: FETCH_FAILURE, error });\n  }\n}\n\n// Watcher saga: spawns a new fetchData saga on each LOAD_USERS action\nexport function* watchUserGetData() {\n    // console.log(\"watchUserGetData===>\");\n  yield takeEvery(LOAD_USERS, loadUsersRecord);\n}\n\n\n// Worker Saga: This handles the user update\nfunction* updateUserRecord(action) {\n  try {\n    const { userId, updatedUserData } = action.payload;\n    // console.log(\"userId===>\", userId);\n    \n    // Example: Assume an API call to update user data\n    const response = yield call(axios.put, `${utilsConstant.BASE_URL}/api/users/${userId}`, updatedUserData);\n\n    // Dispatch an action to update the Redux state after a successful update\n    yield put({ type: UPDATE_USER_SUCCESS, payload: response.data });\n  } catch (error) {\n    yield put({ type: FETCH_FAILURE, error });\n  }\n}\n\n// Watcher Saga: Watches for the UPDATE_USER_REQUEST action\nexport function* watchUpdateUserRecord() {\n  yield takeEvery(UPDATE_USER_REQUEST, updateUserRecord);\n}\n\nexport function* deleteUserRecord(action) {\n  try {\n    const { userId } = action.payload;\n    // console.log(\"userId===>\", userId);\n    \n    // Example: Assume an API call to delete user data\n    yield call(axios.delete, `${utilsConstant.BASE_URL}/api/users/${userId}`);\n\n     // Dispatch action to fetch updated users list\n     yield put({ type: DELETE_USER_SUCCESS, payload: userId });\n\n    // Fetch updated user list from the API\n    yield put({ type: LOAD_USERS }); // Trigger user list refresh\n\n  } catch (error) {\n    yield put({ type: FETCH_FAILURE, error });\n  }\n}\n\n// Watcher Saga: Watches for the DELETE_USER_REQUEST action\nexport function* watchDeleteUserRecord() {\n  yield takeEvery(DELETE_USER_REQUEST, deleteUserRecord);\n}\n\n"],"mappings":"AAAA;;AAEA,SAASA,IAAI,EAAEC,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AACzD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,aAAa,MAAM,sBAAsB;;AAErD;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,EAACC,aAAa,EAAEC,aAAa,EAC9CC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAC7E,4BAA4B;;AAGnC;AACA,UAAUC,eAAeA,CAAA,EAAG;EAC1B,IAAI;IAEF,MAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACG,KAAK,CAACW,GAAG,EAAE,GAAGV,aAAa,CAACW,QAAQ,YAAY,CAAC;IAC7E;IACA,MAAMd,GAAG,CAAC;MACNe,IAAI,EAAET,aAAa;MACnBU,OAAO,EAAEJ,QAAQ,CAACK;IACpB,CAAE,CAAC,CAAC;EACR,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMlB,GAAG,CAAC;MAAEe,IAAI,EAAEV,aAAa;MAAEa;IAAM,CAAC,CAAC;EAC3C;AACF;;AAEA;AACA,OAAO,UAAUC,gBAAgBA,CAAA,EAAG;EAChC;EACF,MAAMlB,SAAS,CAACG,UAAU,EAAEO,eAAe,CAAC;AAC9C;;AAGA;AACA,UAAUS,gBAAgBA,CAACC,MAAM,EAAE;EACjC,IAAI;IACF,MAAM;MAAEC,MAAM;MAAEC;IAAgB,CAAC,GAAGF,MAAM,CAACL,OAAO;IAClD;;IAEA;IACA,MAAMJ,QAAQ,GAAG,MAAMb,IAAI,CAACG,KAAK,CAACF,GAAG,EAAE,GAAGG,aAAa,CAACW,QAAQ,cAAcQ,MAAM,EAAE,EAAEC,eAAe,CAAC;;IAExG;IACA,MAAMvB,GAAG,CAAC;MAAEe,IAAI,EAAEP,mBAAmB;MAAEQ,OAAO,EAAEJ,QAAQ,CAACK;IAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMlB,GAAG,CAAC;MAAEe,IAAI,EAAEV,aAAa;MAAEa;IAAM,CAAC,CAAC;EAC3C;AACF;;AAEA;AACA,OAAO,UAAUM,qBAAqBA,CAAA,EAAG;EACvC,MAAMvB,SAAS,CAACM,mBAAmB,EAAEa,gBAAgB,CAAC;AACxD;AAEA,OAAO,UAAUK,gBAAgBA,CAACJ,MAAM,EAAE;EACxC,IAAI;IACF,MAAM;MAAEC;IAAO,CAAC,GAAGD,MAAM,CAACL,OAAO;IACjC;;IAEA;IACA,MAAMjB,IAAI,CAACG,KAAK,CAACwB,MAAM,EAAE,GAAGvB,aAAa,CAACW,QAAQ,cAAcQ,MAAM,EAAE,CAAC;;IAExE;IACA,MAAMtB,GAAG,CAAC;MAAEe,IAAI,EAAEL,mBAAmB;MAAEM,OAAO,EAAEM;IAAO,CAAC,CAAC;;IAE1D;IACA,MAAMtB,GAAG,CAAC;MAAEe,IAAI,EAAEX;IAAW,CAAC,CAAC,CAAC,CAAC;EAEnC,CAAC,CAAC,OAAOc,KAAK,EAAE;IACd,MAAMlB,GAAG,CAAC;MAAEe,IAAI,EAAEV,aAAa;MAAEa;IAAM,CAAC,CAAC;EAC3C;AACF;;AAEA;AACA,OAAO,UAAUS,qBAAqBA,CAAA,EAAG;EACvC,MAAM1B,SAAS,CAACQ,mBAAmB,EAAEgB,gBAAgB,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}