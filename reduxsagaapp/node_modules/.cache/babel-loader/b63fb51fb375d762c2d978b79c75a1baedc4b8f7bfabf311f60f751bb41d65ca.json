{"ast":null,"code":"/*-----------Redux Thunk connection with createStore-------------- */\n// src/redux/store.js\n// import { createStore, applyMiddleware } from 'redux';\n// import {thunk} from 'redux-thunk';\n// import rootReducer from './reducers'; // Adjust the path to where your root reducer is\n\n// const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// export default store;\n\n/*-----------Redux Thunk connection with configureStore(in built:applyMiddleware(thunk))-------------- */\n// import { configureStore } from '@reduxjs/toolkit';\n// import rootReducer from './reducers';\n\n// const store = configureStore({\n//   reducer: rootReducer,\n// });\n\n// export default store;\n\n/*-----------Redux Saga connection-------------- */\n// 1. Import saga middleware\n// import { createStore, applyMiddleware } from 'redux';\n// import createSagaMiddleware from 'redux-saga'; // 1. Import saga middleware\n// import rootReducer from './reducers'; // Adjust the path to where your root reducer is\n// import rootSaga from './sagas/rootsagas'; // Import your root saga (where all sagas are combined)\n\n// // 2. Create the saga middleware\n// const sagaMiddleware = createSagaMiddleware();// Create the saga middleware\n\n// // 3. Create the Redux store and apply the middleware\n// const store = createStore(\n//   rootReducer, // Your combined reducers\n//   applyMiddleware(sagaMiddleware) // Applying saga middleware to the store\n// );\n\n// // 4. Run the root saga\n// sagaMiddleware.run(rootSaga);// Run the root saga\n\n// export default store;\n\n/*-----------Redux Thunk connection with configureStore(in built:applyMiddleware(thunk))-------------- */\nimport { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\nimport createSagaMiddleware from 'redux-saga'; // 1. Import saga middleware\nimport rootSaga from './sagas/rootsagas'; // Import your root saga (where all sagas are combined)\n\n// // 2. Create the saga middleware\nconst sagaMiddleware = createSagaMiddleware(); // Create the saga middleware\n\nconst store = configureStore({\n  reducer: rootReducer\n});\nexport default store;","map":{"version":3,"names":["configureStore","rootReducer","createSagaMiddleware","rootSaga","sagaMiddleware","store","reducer"],"sources":["/opt/lampp/htdocs/reduxsagaapp/src/redux/store.js"],"sourcesContent":["\n/*-----------Redux Thunk connection with createStore-------------- */\n// src/redux/store.js\n// import { createStore, applyMiddleware } from 'redux';\n// import {thunk} from 'redux-thunk';\n// import rootReducer from './reducers'; // Adjust the path to where your root reducer is\n\n// const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// export default store;\n\n/*-----------Redux Thunk connection with configureStore(in built:applyMiddleware(thunk))-------------- */\n// import { configureStore } from '@reduxjs/toolkit';\n// import rootReducer from './reducers';\n\n// const store = configureStore({\n//   reducer: rootReducer,\n// });\n\n// export default store;\n\n/*-----------Redux Saga connection-------------- */\n// 1. Import saga middleware\n// import { createStore, applyMiddleware } from 'redux';\n// import createSagaMiddleware from 'redux-saga'; // 1. Import saga middleware\n// import rootReducer from './reducers'; // Adjust the path to where your root reducer is\n// import rootSaga from './sagas/rootsagas'; // Import your root saga (where all sagas are combined)\n\n// // 2. Create the saga middleware\n// const sagaMiddleware = createSagaMiddleware();// Create the saga middleware\n\n// // 3. Create the Redux store and apply the middleware\n// const store = createStore(\n//   rootReducer, // Your combined reducers\n//   applyMiddleware(sagaMiddleware) // Applying saga middleware to the store\n// );\n\n// // 4. Run the root saga\n// sagaMiddleware.run(rootSaga);// Run the root saga\n\n// export default store;\n\n/*-----------Redux Thunk connection with configureStore(in built:applyMiddleware(thunk))-------------- */\nimport { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './reducers';\nimport createSagaMiddleware from 'redux-saga'; // 1. Import saga middleware\nimport rootSaga from './sagas/rootsagas'; // Import your root saga (where all sagas are combined)\n\n// // 2. Create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();// Create the saga middleware\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,YAAY;AACpC,OAAOC,oBAAoB,MAAM,YAAY,CAAC,CAAC;AAC/C,OAAOC,QAAQ,MAAM,mBAAmB,CAAC,CAAC;;AAE1C;AACA,MAAMC,cAAc,GAAGF,oBAAoB,CAAC,CAAC,CAAC;;AAE9C,MAAMG,KAAK,GAAGL,cAAc,CAAC;EAC3BM,OAAO,EAAEL;AACX,CAAC,CAAC;AAEF,eAAeI,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}