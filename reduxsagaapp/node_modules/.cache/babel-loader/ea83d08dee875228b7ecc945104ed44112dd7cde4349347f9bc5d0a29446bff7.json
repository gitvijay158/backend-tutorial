{"ast":null,"code":"// src/redux/actions/userActions.js\nimport axios from 'axios';\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USER = 'DELETE_USER';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\n// Action to load users\nexport const loadUsers = users => ({\n  type: LOAD_USERS,\n  payload: users\n});\n\n// export const loadUsers = () => {\n\n//   return (dispatch) => {\n\n//     const token = 'emjjjdsjfj';//localStorage.getItem(\"jwtToken\");\n//     // console.log(\"token===>\", token);\n//     //   fetch placeholder data from jsonplaceholder\n//     fetch(`http://localhost:3002/api/users`, {\n//       headers: {\n//         'Authorization': `Bearer ${token}`\n//       }\n//     })\n//       .then((response) => response.json())\n//       .then((result) =>{\n//         //dispatch response to the store\n//         console.log(\"result===>\", result);\n//         dispatch({ \n//           type: LOAD_USERS, \n//           payload: result\n//         })\n//       }\n\n//       );\n//   };\n\n// };\n\n// Action to update a user\n// export const updateUserOld = (updatedUser) => ({\n//   type: UPDATE_USER,\n//   payload: updatedUser\n// });\n\n// export const updateUser = (userId, updatedUserData) => {\n\n//   return (dispatch, getState) => {\n\n//     const users = getState().userData.users;\n\n//     const updatedUsers = users.map((user) => \n//       user.id === userId ? { ...user, ...updatedUserData } : user\n//     );\n\n//     dispatch({\n//       type: UPDATE_USER,\n//       payload: updatedUsers,\n//     });\n//   };\n\n// };\n\n// export const updateUser = (userId, updatedUserData) => {\n//   return async (dispatch) => {\n//     try {\n//       // Make API call to update user in the database\n//       await axios.put(`http://localhost:3002/api/users/${userId}`, updatedUserData); // Adjust the URL based on your API structure\n\n//       // Refetch the updated user list after the update is successful\n//       const response = await axios.get('http://localhost:3002/api/users'); // Replace with your actual API endpoint\n\n//       // Dispatch the action to update the Redux store with the new user list\n//       dispatch({\n//         type: LOAD_USERS,\n//         payload: response.data, // Updated list of users from the database\n//       });\n\n//       // Optionally, you can also dispatch an individual update if needed\n//       dispatch({\n//         type: UPDATE_USER,\n//         payload: { userId, updatedUserData },\n//       });\n\n//     } catch (error) {\n//       console.error('Error updating user: ', error);\n//       // Handle error (e.g., dispatch an error action)\n//     }\n//   };\n// };\n\n// Action to delete a user\n// export const deleteUser = (id) => ({\n//   type: DELETE_USER,\n//   payload: { id }\n// });\n// export const deleteUser = (userId, updatedUserData) => {\n//   return async (dispatch) => {\n//     try {\n//       // Make API call to update user in the database\n//       await axios.delete(`http://localhost:3002/api/users/${userId}`, updatedUserData); // Adjust the URL based on your API structure\n\n//       // Refetch the updated user list after the update is successful\n//       const response = await axios.get('http://localhost:3002/api/users'); // Replace with your actual API endpoint\n\n//       // Dispatch the action to update the Redux store with the new user list\n//       dispatch({\n//         type: LOAD_USERS,\n//         payload: response.data, // Updated list of users from the database\n//       });\n\n//       // Optionally, you can also dispatch an individual update if needed\n//       dispatch({\n//         type: DELETE_USER,\n//         payload: { userId},\n//       });\n\n//     } catch (error) {\n//       console.error('Error updating user: ', error);\n//       // Handle error (e.g., dispatch an error action)\n//     }\n//   };\n// };","map":{"version":3,"names":["axios","LOAD_USERS","UPDATE_USER","DELETE_USER","FETCH_FAILURE","FETCH_SUCCESS","loadUsers","users","type","payload"],"sources":["/opt/lampp/htdocs/reduxsagaapp/src/redux/actions/userActions.js"],"sourcesContent":["// src/redux/actions/userActions.js\nimport axios from 'axios';\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USER = 'DELETE_USER';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\n// Action to load users\nexport const loadUsers = (users) => ({\n  type: LOAD_USERS,\n  payload: users\n});\n\n// export const loadUsers = () => {\n\n//   return (dispatch) => {\n\n//     const token = 'emjjjdsjfj';//localStorage.getItem(\"jwtToken\");\n//     // console.log(\"token===>\", token);\n//     //   fetch placeholder data from jsonplaceholder\n//     fetch(`http://localhost:3002/api/users`, {\n//       headers: {\n//         'Authorization': `Bearer ${token}`\n//       }\n//     })\n//       .then((response) => response.json())\n//       .then((result) =>{\n//         //dispatch response to the store\n//         console.log(\"result===>\", result);\n//         dispatch({ \n//           type: LOAD_USERS, \n//           payload: result\n//         })\n//       }\n        \n//       );\n//   };\n\n\n// };\n\n// Action to update a user\n// export const updateUserOld = (updatedUser) => ({\n//   type: UPDATE_USER,\n//   payload: updatedUser\n// });\n\n// export const updateUser = (userId, updatedUserData) => {\n\n//   return (dispatch, getState) => {\n\n//     const users = getState().userData.users;\n\n//     const updatedUsers = users.map((user) => \n//       user.id === userId ? { ...user, ...updatedUserData } : user\n//     );\n\n//     dispatch({\n//       type: UPDATE_USER,\n//       payload: updatedUsers,\n//     });\n//   };\n\n// };\n\n// export const updateUser = (userId, updatedUserData) => {\n//   return async (dispatch) => {\n//     try {\n//       // Make API call to update user in the database\n//       await axios.put(`http://localhost:3002/api/users/${userId}`, updatedUserData); // Adjust the URL based on your API structure\n\n//       // Refetch the updated user list after the update is successful\n//       const response = await axios.get('http://localhost:3002/api/users'); // Replace with your actual API endpoint\n\n//       // Dispatch the action to update the Redux store with the new user list\n//       dispatch({\n//         type: LOAD_USERS,\n//         payload: response.data, // Updated list of users from the database\n//       });\n\n//       // Optionally, you can also dispatch an individual update if needed\n//       dispatch({\n//         type: UPDATE_USER,\n//         payload: { userId, updatedUserData },\n//       });\n\n//     } catch (error) {\n//       console.error('Error updating user: ', error);\n//       // Handle error (e.g., dispatch an error action)\n//     }\n//   };\n// };\n\n// Action to delete a user\n// export const deleteUser = (id) => ({\n//   type: DELETE_USER,\n//   payload: { id }\n// });\n// export const deleteUser = (userId, updatedUserData) => {\n//   return async (dispatch) => {\n//     try {\n//       // Make API call to update user in the database\n//       await axios.delete(`http://localhost:3002/api/users/${userId}`, updatedUserData); // Adjust the URL based on your API structure\n\n//       // Refetch the updated user list after the update is successful\n//       const response = await axios.get('http://localhost:3002/api/users'); // Replace with your actual API endpoint\n\n//       // Dispatch the action to update the Redux store with the new user list\n//       dispatch({\n//         type: LOAD_USERS,\n//         payload: response.data, // Updated list of users from the database\n//       });\n\n//       // Optionally, you can also dispatch an individual update if needed\n//       dispatch({\n//         type: DELETE_USER,\n//         payload: { userId},\n//       });\n\n//     } catch (error) {\n//       console.error('Error updating user: ', error);\n//       // Handle error (e.g., dispatch an error action)\n//     }\n//   };\n// };\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,MAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,WAAW,GAAG,aAAa;AACxC,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C,OAAO,MAAMC,aAAa,GAAG,eAAe;AAC5C;AACA,OAAO,MAAMC,SAAS,GAAIC,KAAK,KAAM;EACnCC,IAAI,EAAEP,UAAU;EAChBQ,OAAO,EAAEF;AACX,CAAC,CAAC;;AAEF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}