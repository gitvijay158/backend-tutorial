{"ast":null,"code":"// someSaga.js\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// export const LOAD_USERS = 'LOAD_USERS';\n// export const UPDATE_USER = 'UPDATE_USER';\n// export const DELETE_USER = 'DELETE_USER';\n// export const FETCH_FAILURE = 'FETCH_FAILURE';\n// export const FETCH_SUCCESS = 'FETCH_SUCCESS';\nimport { LOAD_USERS, UPDATE_USER, DELETE_USER, FETCH_FAILURE, FETCH_SUCCESS, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS } from '../actions/types/userTypes';\n\n// Worker saga: will be fired on FETCH_DATA actions\nfunction* loadUsersRecord() {\n  try {\n    const response = yield call(axios.get, 'http://localhost:3002/api/users');\n    // console.log(\"response===>\", response.data);\n    yield put({\n      type: FETCH_SUCCESS,\n      payload: response.data\n    }); //{ type: 'FETCH_SUCCESS', payload: response.data }\n  } catch (error) {\n    yield put({\n      type: FETCH_FAILURE,\n      error\n    });\n  }\n}\n\n// Watcher saga: spawns a new fetchData saga on each LOAD_USERS action\nexport function* watchUserGetData() {\n  // console.log(\"watchUserGetData===>\");\n  yield takeEvery(LOAD_USERS, loadUsersRecord);\n}\n\n// Worker Saga: This handles the user update\nfunction* updateUserRecord(action) {\n  try {\n    const {\n      userId,\n      updatedUserData\n    } = action.payload;\n    console.log(\"userId===>\", userId);\n\n    // Example: Assume an API call to update user data\n    const response = yield call(axios.put, `/api/users/${userId}`, updatedUserData);\n\n    // Dispatch an action to update the Redux state after a successful update\n    yield put({\n      type: UPDATE_USER_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: FETCH_FAILURE,\n      error\n    });\n  }\n}\n\n// Watcher Saga: Watches for the UPDATE_USER_REQUEST action\nexport function* watchUpdateUserRecord() {\n  yield takeEvery(UPDATE_USER_REQUEST, updateUserRecord);\n}","map":{"version":3,"names":["call","put","takeEvery","axios","LOAD_USERS","UPDATE_USER","DELETE_USER","FETCH_FAILURE","FETCH_SUCCESS","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","loadUsersRecord","response","get","type","payload","data","error","watchUserGetData","updateUserRecord","action","userId","updatedUserData","console","log","watchUpdateUserRecord"],"sources":["/opt/lampp/htdocs/reduxsagaapp/src/redux/sagas/userSaga.js"],"sourcesContent":["// someSaga.js\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// export const LOAD_USERS = 'LOAD_USERS';\n// export const UPDATE_USER = 'UPDATE_USER';\n// export const DELETE_USER = 'DELETE_USER';\n// export const FETCH_FAILURE = 'FETCH_FAILURE';\n// export const FETCH_SUCCESS = 'FETCH_SUCCESS';\nimport { LOAD_USERS,UPDATE_USER, DELETE_USER, FETCH_FAILURE, FETCH_SUCCESS, UPDATE_USER_REQUEST, UPDATE_USER_SUCCESS} from '../actions/types/userTypes';\n\n\n// Worker saga: will be fired on FETCH_DATA actions\nfunction* loadUsersRecord() {\n  try {\n\n    const response = yield call(axios.get, 'http://localhost:3002/api/users');\n    // console.log(\"response===>\", response.data);\n    yield put({ \n        type: FETCH_SUCCESS, \n        payload: response.data\n      } );//{ type: 'FETCH_SUCCESS', payload: response.data }\n  } catch (error) {\n    yield put({ type: FETCH_FAILURE, error });\n  }\n}\n\n// Watcher saga: spawns a new fetchData saga on each LOAD_USERS action\nexport function* watchUserGetData() {\n    // console.log(\"watchUserGetData===>\");\n  yield takeEvery(LOAD_USERS, loadUsersRecord);\n}\n\n\n// Worker Saga: This handles the user update\nfunction* updateUserRecord(action) {\n  try {\n    const { userId, updatedUserData } = action.payload;\n    console.log(\"userId===>\", userId);\n    \n    // Example: Assume an API call to update user data\n    const response = yield call(axios.put, `/api/users/${userId}`, updatedUserData);\n\n    // Dispatch an action to update the Redux state after a successful update\n    yield put({ type: UPDATE_USER_SUCCESS, payload: response.data });\n  } catch (error) {\n    yield put({ type: FETCH_FAILURE, error });\n  }\n}\n\n// Watcher Saga: Watches for the UPDATE_USER_REQUEST action\nexport function* watchUpdateUserRecord() {\n  yield takeEvery(UPDATE_USER_REQUEST, updateUserRecord);\n}\n\n"],"mappings":"AAAA;;AAEA,SAASA,IAAI,EAAEC,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AACzD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,EAACC,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,mBAAmB,QAAO,4BAA4B;;AAGvJ;AACA,UAAUC,eAAeA,CAAA,EAAG;EAC1B,IAAI;IAEF,MAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACG,KAAK,CAACU,GAAG,EAAE,iCAAiC,CAAC;IACzE;IACA,MAAMZ,GAAG,CAAC;MACNa,IAAI,EAAEN,aAAa;MACnBO,OAAO,EAAEH,QAAQ,CAACI;IACpB,CAAE,CAAC,CAAC;EACR,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMhB,GAAG,CAAC;MAAEa,IAAI,EAAEP,aAAa;MAAEU;IAAM,CAAC,CAAC;EAC3C;AACF;;AAEA;AACA,OAAO,UAAUC,gBAAgBA,CAAA,EAAG;EAChC;EACF,MAAMhB,SAAS,CAACE,UAAU,EAAEO,eAAe,CAAC;AAC9C;;AAGA;AACA,UAAUQ,gBAAgBA,CAACC,MAAM,EAAE;EACjC,IAAI;IACF,MAAM;MAAEC,MAAM;MAAEC;IAAgB,CAAC,GAAGF,MAAM,CAACL,OAAO;IAClDQ,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,MAAM,CAAC;;IAEjC;IACA,MAAMT,QAAQ,GAAG,MAAMZ,IAAI,CAACG,KAAK,CAACF,GAAG,EAAE,cAAcoB,MAAM,EAAE,EAAEC,eAAe,CAAC;;IAE/E;IACA,MAAMrB,GAAG,CAAC;MAAEa,IAAI,EAAEJ,mBAAmB;MAAEK,OAAO,EAAEH,QAAQ,CAACI;IAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMhB,GAAG,CAAC;MAAEa,IAAI,EAAEP,aAAa;MAAEU;IAAM,CAAC,CAAC;EAC3C;AACF;;AAEA;AACA,OAAO,UAAUQ,qBAAqBA,CAAA,EAAG;EACvC,MAAMvB,SAAS,CAACO,mBAAmB,EAAEU,gBAAgB,CAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}